version: '3'
services:
    backend:
        image: inspiregroup/artemis-backend:release-${SYSTEM_VERSION}
        container_name: backend
        depends_on:
            - rabbitmq
            - postgres
        networks:
            - artemis
        expose:
            - ${SUPERVISOR_PORT}
        environment:
            RABBITMQ_HOST: ${RABBITMQ_HOST}
            POSTGRES_HOST: ${POSTGRES_HOST}
            DATABASE_NAME: ${DB_NAME}
            DATABASE_USER: ${DB_USER}
            DATABASE_HOST: ${POSTGRES_HOST}
            DATABASE_PASSWORD: ${DB_PASS}
            SUPERVISOR_HOST: ${SUPERVISOR_HOST}
            SUPERVISOR_PORT: ${SUPERVISOR_PORT}
            HASURA_GRAPHQL_ACCESS_KEY: ${HASURA_SECRET_KEY}
        volumes:
            # uncomment to run from source code
            # - ./backend/:/root/
            - ./backend/configs/:/etc/artemis/
            - ./backend/supervisor.d/:/etc/supervisor/conf.d/
    frontend:
        image: inspiregroup/artemis-frontend:release-${SYSTEM_VERSION}
        container_name: frontend
        depends_on:
            - rabbitmq
            - postgres
            - postgrest
            - backend
        networks:
            - artemis
        expose:
            - ${FLASK_PORT}
        environment:
            RABBITMQ_HOST: ${RABBITMQ_HOST}
            POSTGRES_HOST: ${POSTGRES_HOST}
            SYSTEM_VERSION: ${SYSTEM_VERSION}
            MACHINE_IP: ${MACHINE_IP}
            FLASK_PORT: ${FLASK_PORT}
            USER_ROOT_USERNAME: ${ADMIN_USER}
            USER_ROOT_PASSWORD: ${ADMIN_PASS}
            USER_ROOT_EMAIL: ${ADMIN_EMAIL}
            POSTGREST_FLASK_HOST: ${POSTGREST_HOST}:${POSTGREST_PORT}
            SUPERVISOR_HOST: ${SUPERVISOR_HOST}
            SUPERVISOR_PORT: ${SUPERVISOR_PORT}
            JWT_SECRET_KEY: ${JWT_SECRET_KEY}
            FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
            JS_VERSION: ${JS_VERSION}
            SECURITY_PASSWORD_SALT: ${SECURITY_PASSWORD_SALT}
        volumes:
            # uncomment to run from source code
            # - ./frontend/:/root/
            - ./frontend/webapp/configs/:/etc/artemis/
            - ./frontend/db/:/etc/webapp/db/
    nginx:
        image: nginx:1.15-alpine
        container_name: nginx
        restart: always
        depends_on:
            - frontend
            - postgrest
        networks:
            - artemis
        expose:
            - 80
            - 443
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./frontend/webapp/configs/nginx.conf:/etc/nginx/nginx.conf
            - ./frontend/webapp/configs/certs/:/etc/nginx/certs/
    rabbitmq:
        image: rabbitmq:3.7.8-management-alpine
        container_name: rabbitmq
        restart: always
        networks:
            - artemis
        expose:
            - 5671
            - 5672
            - 15672
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    postgres:
        image: timescale/timescaledb:1.1.0-pg10
        container_name: postgres
        restart: always
        networks:
            - artemis
        expose:
            - 5432
        environment:
            POSTGRES_DB: ${DB_NAME}
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASS}
        volumes:
            - ./postgres-data-current:/var/lib/postgresql/data
            - ./other/postgres-backup.sh:/etc/periodic/daily/backup
            - ./postgres-data-backup/:/tmp/
            - ./other/db/init.sql:/docker-entrypoint-initdb.d/zinit.sql
            - ./other/db/data/:/docker-entrypoint-initdb.d/data/
            - ./other/db/libs/:/docker-entrypoint-initdb.d/libs/
    postgrest:
        image: postgrest/postgrest:v5.2.0
        container_name: postgrest
        restart: always
        depends_on:
            - postgres
            - backend
        networks:
            - artemis
        expose:
            - 3000
        environment:
            PGRST_DB_URI: postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}
            PGRST_DB_SCHEMA: ${DB_SCHEMA}
            PGRST_DB_ANON_ROLE: ${DB_USER}
    pg_amqp_bridge:
        image: subzerocloud/pg-amqp-bridge:0.0.6
        container_name: pg_amqp_bridge
        depends_on:
            - postgres
            - backend
        networks:
            - artemis
        environment:
        # - RUST_LOG=info # output forwarded messages
        - POSTGRESQL_URI=postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}
        - AMQP_URI=amqp://${RABBITMQ_HOST}//
        - BRIDGE_CHANNELS=events:amq.direct
    graphql:
        image: hasura/graphql-engine:v1.0.0-alpha31
        container_name: graphql
        restart: always
        depends_on:
            - postgres
        networks:
            - artemis
        expose:
            - 8080
        environment:
            HASURA_GRAPHQL_DATABASE_URL: postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}
            HASURA_GRAPHQL_ACCESS_KEY: ${HASURA_SECRET_KEY}
            HASURA_GRAPHQL_ENABLE_CONSOLE: ${HASURA_CONSOLE}
            HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256", "key":"${JWT_SECRET_KEY}"}'
        command:
            - graphql-engine
            - serve

networks:
    artemis:
