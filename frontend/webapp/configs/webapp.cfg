# AUTH_METHOD = "ldap"
AUTH_METHOD = "local"

# LDAP configuration
#SECURITY_LDAP_URI = "ldap"
#SECURITY_LDAP_BASE_DN = "ou=People,dc=example,dc=org"
#SECURITY_LDAP_SEARCH_FILTER = "(mail={})"
#SECURITY_LDAP_BIND_DN = "cn=admin,dc=example,dc=org"
#SECURITY_LDAP_BIND_PASSWORD = "admin"
#SECURITY_LDAP_EMAIL_FIELDNAME = "mail"

#SECURITY_LDAP_ADMIN_GROUPS_FIELDNAME = "objectClass"
#SECURITY_LDAP_ADMIN_GROUPS = ["top"]

#SECURITY_USER_IDENTITY_ATTRIBUTES = ['email', 'username']

## RADIUS support (begin)
#
# AUTH_METHOD = "radius"

# mandatory: SECURITY_RADIUS_SERVERS:
#
# a list of dict values to be tried out:
#  retries - number of retries before giving up (optional, default is 3)
#  timeout - timeout per each try in secodns (optional, default is 5)
#  host    - RADIUS server hostname (required)
#  port    - RADIUS server port     (required)
#  secret  - RADIUS server secret   (required)
#
# example:
## SECURITY_RADIUS_SERVERS = [ { "retries": 1, "timeout": 1, "host": "radius1", "port": 1812, "secret": "secret1" }, { "retries": 1, "timeout": 1, "host": "radius2", "port": 1812, "secret": "secret2" } ]

# optional: SECURITY_RADIUS_ROLE_ATTRIBUTE_CODE
#
# RADIUS attribute code to inspect for role mapping
#  value must be a number; if not defined the mapping is skipped and default role is assumed
#
# example:
## SECURITY_RADIUS_ROLE_ATTRIBUTE_CODE = "136"

# optional: SECURITY_RADIUS_ROLE_MAPPING
#
# a dict with radius attribute value to role mapping
#  key   - indicates what value from SECURITY_RADIUS_ROLE_ATTRIBUTE_CODE is being mapped
#  value - ARTEMIS role to map to (allowed values: admin, user)
# example:
## SECURITY_RADIUS_ROLE_MAPPING = { 15: "admin", 7: "admin", 3: "user" }

# optional: SECURITY_RADIUS_DEFAULT_ROLE
#
#  default role to assume when mapping is not available or not configured
#  if not specified the implicit default is: "user"
# example:
## SECURITY_RADIUS_DEFAULT_ROLE = "admin"

## RADIUS support (end)
