{% extends "base/layout.htm" %}

{% block title %}
    {{super()}} - Overview
{% endblock %}

{% block head %}
    {{super()}}
    <link rel="stylesheet" href="{{ url_for('static', filename='css/index.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='datatable/dataTables.bootstrap4.min.css') }}">
    <link rel="stylesheet" href="https://cdn.datatables.net/rowreorder/1.2.5/css/rowReorder.dataTables.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.2.3/css/responsive.dataTables.min.css">
{% endblock %}

{% block page_content %}
    {{super()}}
        <div class="row">
            <div class="col-lg-12">
                <h1 class="page-header">Dashboard</h1>
            </div>


            <div class="col-lg-8">
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <i class="fa fa-bell fa-fw"></i> Activity
                        </div>
                        <div class="panel-body">
                            Welcome back <b>{{ current_user.email }}</b>, your last login was at <b id="last_login">
                            {% if current_user.last_login_at != None %}
                                {{ current_user.last_login_at.timestamp() }}
                            {% else %}
                                0
                            {% endif %}
                            </b> from {{ current_user.last_login_ip }}.
                        </div>
                    </div>
                </div>
                <div class="col-lg-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <i class="fa fa-bell fa-fw"></i> Ongoing, Non-Dormant Hijacks
                        </div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-lg-12">
                                    <table class="table table-striped table-bordered" style="width:100%" id="hijacks_table">
                                        <thead>
                                            <th helpText="field_time_last_update">Last Update</th>
                                            <th helpText="field_time_detected">Time Detected</th>
                                            <th helpText="field_hijacked_prefix">Hijacked Prefix</th>
                                            <th helpText="field_matched_prefix">Matched Prefix</th>
                                            <th helpText="field_hijack_type">Type</th>
                                            <th helpText="field_hijacker_as">Hijacker AS</th>
                                            <th helpText="field_rpki_status">RPKI</th>
                                            <th helpText="field_peers_seen"># Peers Seen</th>
                                            <th helpText="field_ases_infected"># ASes Infected</th>
                                            <th helpText="field_hijack_ack">Ack</th>
                                            <th helpText="field_hijack_more">More</th>
                                        </thead>
                                        <tfoot>
                                            <tr>
                                                <th>Last Update</th>
                                                <th>Time Detected</th>
                                                <th>Hijacked Prefix</th>
                                                <th>Matched Prefix</th>
                                                <th>Type</th>
                                                <th>Hijack AS</th>
                                                <th>RPKI</th>
                                                <th># Peers Seen</th>
                                                <th># ASes Infected</th>
                                                <th>Ack</th>
                                                <th>More</th>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-12">
                        </hr>
                        <p class="float-right"><i>Times are shown in your local time zone <b id="timezone"></b>.</i></p>
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <div id="monitors">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <i class="fa fa-bell fa-fw"></i> System Status
                        </div>
                        <div class="panel-body">
                            <div class="list-group">
                                <ul id="modules_states">
                                    <li class="list-group-item">
                                        <div class="row">
                                            <div class="col-lg-4"><strong>Module</strong></div>
                                            <div class="col-lg-8">
                                                <div class="row">
                                                    <div class="col-lg-4"> <strong>Status</strong> </div>
                                                    <div class="col-lg-8"> <strong>Uptime</strong> </div>
                                                </div>
                                            </div>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="systemstatus">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <i class="fa fa-bell fa-fw"></i> Statistics
                        </div>
                        <div class="panel-body">
                            <div class="list-group">
                                <ul id="db_stats_list"></ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    {% block scripts %}
        {{super()}}
        <script nonce="{{ csp_nonce() }}">
            var table;
            var hasura_stats = [
                "monitored_prefixes",
                "configured_prefixes",
                "monitor_peers",
                "total_bgp_updates",
                "total_unhandled_updates",
                "total_hijacks",
                "ignored_hijacks",
                "resolved_hijacks",
                "withdrawn_hijacks",
                "mitigation_hijacks",
                "ongoing_hijacks",
                "dormant_hijacks",
                "acknowledged_hijacks",
                "outdated_hijacks"
            ];
            var hasura_fetch = [
                "time_detected",
                "prefix",
                "type",
                "hijack_as",
                "rpki_status",
                "num_peers_seen",
                "num_asns_inf",
                "key","seen",
                "active",
                "dormant",
                "under_mitigation",
                "time_last",
                "configured_prefix"
            ];
            var hasura = {

                "subscription": {
                    "count" : {
                        "query": "datatable: view_hijacks_aggregate { aggregate { count }",
                    },
                    "view_data": {
                        "query": "view_data: view_hijacks(limit: 10, offset: 0, order_by: {timestamp: desc_nulls_first}) {" + hasura_fetch.join(' ') + "} }",
                    },
                    "stats": {
                        "query": "{ view_index_all_stats { " + hasura_stats.join(' ') + " } }",
                        },
                },
                "data" : {
                    "view_data": [],
                    "count": 0,
                    "stats": []
                },
                "extra": {
                    "stats_callback": null,
                    "table_callback": null,
                    "type": "hijacks"
                }
            }

            var static_urls = {
                "handled.png": "{{ url_for('static', filename='images/handled.png') }}",
                "unhadled.png": "{{ url_for('static', filename='images/unhadled.png') }}",
            };
            var hijack_redirect = "{{ url_for('main.display_hijack') }}";

            var datatable_parameters = {
                    'order': [
                        {
                            'column': 0,
                            'dir': "desc"
                        }
                    ],
                    'offset': 0,
                    'limit': 0,
                    'and': 'where: { _and: [{ active : {_eq: true } }, { dormant : {_eq: false} }] }'
                };

            var filter_parameters = {
                'configured_prefix': null,
                'time': null,
                'prefix': null,
                'hijack_as': null,
                'rpki_status': null,
                'type': null
            };

            var exlude_columns_from_search = ['Last Update', 'Time Detected', 'Status', '# Peers Seen', '# ASes Infected', 'Ack', 'Mark', 'More'];

            var custom_message_for_search = {};

            var search_table_map = {
                2: "prefix",
                3: "configured_prefix",
                4: "type",
                5: "hijack_as",
                6: "rpki_status"
            };

            var columns = [
                { data: 'time_last' },
                { data: 'time_detected' },
                { data: 'prefix' },
                { data: 'configured_prefix' },
                { data: 'type' },
                { data: 'hijack_as' },
                { data: 'rpki_status' },
                { data: 'num_peers_seen' },
                { data: 'num_asns_inf' }];

            hasura['extra']['stats_callback'] = function render_db_stats() {
                if($('#db_stats_list li').length == 0){
                    for (var key in hasura['data']['stats']) {
                        var html_ = [];
                        html_.push('<li class="list-group-item"><div class="row"><div class="col-lg-7" helpText="field_stats_');
                        html_.push(key);
                        html_.push('" id="db_stat_legend_');
                        html_.push(key);
                        html_.push('">');
                        var name_splitted = key.split('_');
                        for(var i in name_splitted){
                            if(name_splitted[i] == "bgp"){
                                html_.push(name_splitted[i].toUpperCase() + " ");
                            }else {
                                html_.push(name_splitted[i].charAt(0).toUpperCase() + name_splitted[i].slice(1) + " ");
                            }
                        }
                        html_.push('</div><div class="col-lg-5" id="db_stat_value_');
                        html_.push(key);
                        html_.push('"><b>');
                        html_.push(hasura['data']['stats'][key]);
                        html_.push('</b></div></div></li>');

                        $('#db_stats_list').append(html_.join(''));
                    }
                    displayHelpTextStats();
                }else{
                    for(var key in hasura['data']['stats']){
                        $('#db_stat_value_' + key).css("font-weight", "bold");
                        $('#db_stat_value_' + key).text(hasura['data']['stats'][key]);
                    }
                }
            }

            function render_modules_state(data) {
                $('#modules_states li').not('li:first').remove();
                data['view_processes'].sort((str1, str2) => (str1['name'] < str2['name'] ? -1 : +(str1['name'] > str2['name'])));

                for (var key in data['view_processes']) {

                    if(data['view_processes'][key].name.includes('_')){
                        var find_first = parseInt(data['view_processes'][key].name.split('_')[1]);

                        if(find_first == 0){
                            var name = data['view_processes'][key].name.split('_')[0];
                            $('#modules_states').append( // Append the parent multiple module
                                create_module_render_li(
                                    {
                                        "raw_name": name,
                                        "name_edited": name.charAt(0).toUpperCase() + name.slice(1),
                                        "running": "multiple",
                                        "timestamp": null,
                                        "display": true,
                                        "multiple_status": aggregate_status_of_modules(data['view_processes'], name, key) // Extra field for status aggregation
                                    }
                                )
                            );

                            name = (data['view_processes'][key].name.split('_')).join(' ');
                            $('#modules_states').append(
                                create_module_render_li(
                                    {
                                        "raw_name": name,
                                        "name_edited": name.charAt(0).toUpperCase() + name.slice(1),
                                        "parent_name": data['view_processes'][key].name.split('_')[0],
                                        "running": data['view_processes'][key].running,
                                        "loading": data['view_processes'][key].loading,
                                        "timestamp": data['view_processes'][key].timestamp,
                                        "display": false
                                    }
                                )
                            );

                        }else{
                            var name = (data['view_processes'][key].name.split('_')).join(' ');
                            $('#modules_states').append(
                                create_module_render_li(
                                    {
                                        "raw_name": name,
                                        "name_edited": name.charAt(0).toUpperCase() + name.slice(1),
                                        "parent_name": data['view_processes'][key].name.split('_')[0],
                                        "running": data['view_processes'][key].running,
                                        "loading": data['view_processes'][key].loading,
                                        "timestamp": data['view_processes'][key].timestamp,
                                        "display": false
                                    }
                                )
                            );
                        }

                    }else{
                        var name = data['view_processes'][key].name;
                        $('#modules_states').append(
                            create_module_render_li(
                                {
                                    "raw_name": name,
                                    "name_edited": name.charAt(0).toUpperCase() + name.slice(1),
                                    "running": data['view_processes'][key].running,
                                    "loading": data['view_processes'][key].loading,
                                    "timestamp": data['view_processes'][key].timestamp,
                                    "display": true
                                }
                            )
                        );
                    }
                }

                displayHelpTextStats();
                fetchDBVersion();

                let elements = document.getElementsByClassName('view_multiple_modules');
                for (let i = 0; i < elements.length; i++) {
                    elements[i].addEventListener('click', () => multipleView(elements[i].name))
                }
            }

            function create_module_render_li(obj){
                var html_code = [];
                if(obj.name_edited == "Database"){
                    obj.name_edited += ' v.<version id="database_version"></version>';
                }

                html_code.push('<li ');

                if(obj.display == true){
                    html_code.push('style="display:block" ');
                    html_code.push(' class="list-group-item"><div class="row"><div class="col-lg-4" helpText="field_');
                    html_code.push(obj.raw_name);
                    html_code.push('">');
                }else{
                    html_code.push('style="display:none;background-color:rgba(0,0,0,.05);" ');
                    html_code.push('parent="');
                    html_code.push(obj.parent_name);
                    html_code.push('" class="list-group-item"><div class="row"><div class="col-lg-4">');
                }

                html_code.push(obj.name_edited);
                html_code.push('</div><div class="col-lg-8">');
                html_code.push('<div class="row"><div class="col-lg-4">');
                if(obj.running == true){
                    if("parent_name" in obj){
                        if(obj.loading == true){
                            html_code.push('<button type="button" class="btn btn-warning btn-sm"> On </div>');
                        }
                        else{
                            html_code.push('<button type="button" class="btn btn-success btn-sm"> On </div>');
                        }
                    }else{
                        if(obj.loading == true){
                            html_code.push('<button type="button" class="btn btn-warning btn-sm"> On <span class="badge badge-light">1/1</span></button></div>');
                        }
                        else{
                            html_code.push('<button type="button" class="btn btn-success btn-sm"> On <span class="badge badge-light">1/1</span></button></div>');
                        }
                    }

                    var seconds_elapsed = elapsed_seconds(obj.timestamp);
                    html_code.push('<div class="col-lg-8"><time_passed elapsed="');
                    html_code.push(seconds_elapsed);
                    html_code.push('">');
                    html_code.push(calculate_time_passed(seconds_elapsed));
                    html_code.push('</time_passed></div></div>');
                }else if(obj.running == "multiple"){
                    if(obj.multiple_status[3] == "on"){
                        html_code.push('<button type="button" class="btn btn-success btn-sm"> On <span class="badge badge-light">');
                        html_code.push(obj.multiple_status[0] + "/" + obj.multiple_status[2]);
                        html_code.push('</span></button></div>');
                    }else if(obj.multiple_status[3] == "off"){
                        html_code.push('<button type="button" class="btn btn-danger btn-sm"> On <span class="badge badge-light">');
                        html_code.push(obj.multiple_status[0] + "/" + obj.multiple_status[2]);
                        html_code.push('</span></button></div>');
                    }else{
                        html_code.push('<button type="button" class="btn btn-warning btn-sm"> On <span class="badge badge-light">');
                        html_code.push(obj.multiple_status[0] + "/" + obj.multiple_status[2]);
                        html_code.push('</span></button></div>');
                    }
                    html_code.push('<div class="col-lg-8"><a class="view_multiple_modules" id="view_multiple_');
                    html_code.push(obj.raw_name);
                    html_code.push('" name="');
                    html_code.push(obj.raw_name);
                    html_code.push('" href="#">View instances</a></div></div>');
                }else{

                    if("parent_name" in obj){
                        html_code.push('<button type="button" class="btn btn-danger btn-sm"> Off </div>');
                    }else{
                        html_code.push('<button type="button" class="btn btn-danger btn-sm"> On <span class="badge badge-light">0/1</span></button></div>');
                    }

                    html_code.push('<div class="col-lg-8"> </div></div>');
                }
                html_code.push('</div></div></li>');
                return html_code.join('');
            }

            function multipleView(name){
                if($('#view_multiple_' + name).text() == "View instances"){
                    $('#view_multiple_' + name).text("Hide instances");
                    $('li[parent="' + name + '"]').each(function() {
                        $(this).css("display", "block");
                    });

                }else{
                    $('#view_multiple_' + name).text("View instances");
                    $('li[parent="' + name + '"]').each(function() {
                        $(this).css("display", "none");
                    });
                }
            }


            $('#hijacks_table tfoot th').each(function() {
                var title = $(this).text();
                if(!(exlude_columns_from_search.includes(title))){
                    if(title in custom_message_for_search){
                        var html_ = '<input class="form-control" id="input_' + title + '" type="text" placeholder="' + custom_message_for_search[title] + '" />';
                        html_ += '<div class="invalid-feedback"></div>';
                        $(this).html(html_);
                    }else{
                        var html_ = '<input class="form-control" id="input_' + title + '"s type="text" placeholder="' + title + '" />';
                        html_ += '<div class="invalid-feedback"></div>';
                        $(this).html(html_);
                    }
                }else{
                    $(this).html('');
                }
            });

            function inspect_input_of_search_boxes(){
                $("#hijacks_table tfoot tr th").each(function (index, item) {
                    if(index in search_table_map){
                        var value = $(this).children("input").val();
                        if(value == null || value == ''){
                            filter_parameters[search_table_map[index]] = null;
                            if($(this).children("input").hasClass("is-invalid")){
                                $(this).children("input").removeClass("is-invalid");
                                $(this).children("div").hide();
                            }
                        }else{
                            if(search_table_map[index] == 'prefix' || search_table_map[index] == 'configured_prefix'){
                                    filter_parameters[search_table_map[index]] = input_filter_prefix(value, $(this));
                            }else if(search_table_map[index] == 'hijack_as'){
                                var number_reg = /^\s*(\d+)\s*$/;
                                var match = number_reg.exec(value);
                                var hijack_as = null;
                                if(match != null){
                                    hijack_as = parseInt(match[1]);
                                }else{
                                    hijack_as = -1;
                                }
                                if(0 < hijack_as && hijack_as < 4199999999){
                                    filter_parameters[search_table_map[index]] = hijack_as;
                                    if($(this).children("input").hasClass("is-invalid")){
                                        $(this).children("input").removeClass("is-invalid");
                                        $(this).children("div").hide();
                                    }
                                }else{
                                    $(this).children("input").addClass("is-invalid");
                                    $(this).children("div").text('Not an ASN');
                                    $(this).children("div").show();
                                }
                            }else if(search_table_map[index] == 'type'){
                                var type_regex = /^\s*(([S|E|Q]\|[0|1|P|-]\|-\|[L-])|([S|E|Q]\|[0|1|P|-]\|-)|((S\|0)|(S\|1)|(S\|P)|(E\|0)|(E\|1)|(E\|P)|(Q\|0))|([S|E|Q|0|1|P|L]))\s*$/;
                                if(type_regex.exec(value)){
                                    match_value = value.replace(/^\s+|\s+$/g, '');
                                    filter_parameters[search_table_map[index]] = match_value;
                                    if($(this).children("input").hasClass("is-invalid")){
                                        $(this).children("input").removeClass("is-invalid");
                                        $(this).children("div").hide();
                                    }
                                }else{
                                    $(this).children("input").addClass("is-invalid");
                                    $(this).children("div").text('Not (S|E|Q)|(0|1|-)|(-)|(-|L), or valid subset');
                                    $(this).children("div").show();
                                }
                            }else if(search_table_map[index] == 'rpki_status'){
                                var type_regex = /^\s*((VD)|(IA)|(IL)|(IU)|(NF)|(NA))\s*$/;
                                if(type_regex.exec(value)){
                                    match_value = value.replace(/^\s+|\s+$/g, '');
                                    filter_parameters[search_table_map[index]] = match_value;
                                    if($(this).children("input").hasClass("is-invalid")){
                                        $(this).children("input").removeClass("is-invalid");
                                        $(this).children("div").hide();
                                    }
                                }else{
                                    $(this).children("input").addClass("is-invalid");
                                    $(this).children("div").text('Not (VD)|(IA)|(IL)|(IU)|(NF)|(NA)');
                                    $(this).children("div").show();
                                }
                            }else{
                                filter_parameters[search_table_map[index]] = value;
                            }
                        }
                    }
                });
            }

            function construct_filter_hijacks_query(){
                var filters = [];
                inspect_input_of_search_boxes();

                if(filter_parameters['configured_prefix'] != null){
                    filters.push('{ configured_prefix: {_eq: "' + filter_parameters['configured_prefix'] + '"} }');
                }

                if(filter_parameters['prefix'] != null){
                    filters.push('{ prefix: {_eq: "' + filter_parameters['prefix'] + '"} }');
                }

                if(filter_parameters['hijack_as'] != null){
                    filters.push('{ hijack_as: {_eq: "' + filter_parameters['hijack_as'] + '"} }');
                }

                if(filter_parameters['type'] != null){
                    filters.push('{ type: {_like: "%' + filter_parameters['type'] + '%"} }');
                }

                if(filter_parameters['rpki_status'] != null){
                    filters.push('{ rpki_status: {_eq: "' + filter_parameters['rpki_status'] + '"} }');
                    download_filters.push('rpki_status.eq.' + filter_parameters['rpki_status']);
                }

                if(filters.length > 0){
                    $("#distinct_values_selection").val('select');
                    $('#distinct_values_text').val("");
                    $('#distinct_values_text').hide();
                    datatable_parameters['and'] = 'where: { _and: [' + filters.join() + ', { active : {_eq: true } }, { dormant : {_eq: false} } ] }';
                }else{
                    datatable_parameters['and'] = 'where: { _and: [{ active : {_eq: true } }, { dormant : {_eq: false} }] }';
                }
            }

            function render_table(ws){
                construct_filter_hijacks_query();

                table = $('#hijacks_table').DataTable( {
                    "processing": false,
                    "serverSide": true,
                    "searching": false,
                    "select": false,
                    "pagingType": "numbers",
                    "ajax": (data, callback, settings) => {
                        let count_query = [];
                        let data_query = [];

                        var sort;
                        if(data.order[0].dir == 'desc'){
                            sort = 'desc_nulls_first';
                        }else{
                            sort = 'asc';
                        }
                        datatable_parameters['offset'] = data.start;
                        datatable_parameters['limit'] = data.length;

                        count_query.push(" count_data: view_hijacks_aggregate");
                        if(datatable_parameters['and'] != null){
                            count_query.push("(");
                            count_query.push(datatable_parameters['and']);
                            count_query.push(") { aggregate { count } } ");
                        }else{
                            count_query.push(" { aggregate { count } } ");
                        }

                        data_query.push("view_data: view_hijacks(limit: ");
                        data_query.push(datatable_parameters['limit']);
                        data_query.push(", offset: ");
                        data_query.push(datatable_parameters['offset']);
                        data_query.push(", order_by: {");
                        data_query.push(columns[data.order[0].column].data);
                        data_query.push(": ");
                        data_query.push(sort);
                        data_query.push(" } ");

                        if(datatable_parameters['and'] != null){
                            data_query.push(datatable_parameters['and']);
                        }
                        data_query.push(") { ");
                        data_query.push(hasura_fetch.join(' '));
                        data_query.push(" }");

                        count_open_details = 0;

                        hasura['subscription']['count']['query'] = "{" + count_query.join('') + "}";
                        hasura['subscription']['view_data']['query'] = "{" + data_query.join('') + "}";
                        hasura['extra']['table_callback'] = callback;

                        fetchDatatableLive(ws);
                    },
                    initComplete: function() {
                        var api = this.api();
                        api.columns().every(function() {
                            var that = this;
                            var column_index = that[0][0]
                            $('input', this.footer()).on('keydown', function(ev) {
                                if (ev.keyCode == 13) { //only on enter keypress (code 13)
                                    construct_filter_hijacks_query();
                                    that.draw()
                                }
                            });
                        });
                    },
                    "order": [[ 0, "desc" ]],
                    "columns": [
                        { data: 'time_last', "width": "140px" },
                        { data: 'time_detected', "width": "140px" },
                        { data: 'prefix' },
                        { data: 'configured_prefix' },
                        { data: 'type', "width": "60px" },
                        { data: 'hijack_as' },
                        { data: 'rpki_status' },
                        { data: 'num_peers_seen', "width": "30px" },
                        { data: 'num_asns_inf', "width": "30px" },
                        { data: 'seen', "width": "14px" },
                        { data: 'hijack_link', "width": "14px" }
                    ],
                    "columnDefs": [
                        {
                            "targets": [2,3,4,5,6,9,10],
                            "orderable": false
                        },
                        {
                            "targets": [0,1,2,3,4,5,6,7,8,9],
                            "className": "text-center",
                        },
                    ],
                    "language": {
                        "emptyTable": "<img src=\"{{ url_for('static', filename='images/checkmark.png') }}\" ></img></br><h3>No hijack alerts.</h3></br>"
                    },
                    "responsive": true
                });
            }

            function elapsed_seconds(date){
                var current_date = new Date();
                var ellapsed_time_ms = current_date - moment.utc(date).local();
                var seconds = parseInt((ellapsed_time_ms / 1000), 10);
                return seconds;
            }

            function calculate_time_passed(seconds){
                var days = Math.floor(seconds / (3600 * 24));
                seconds  -= days * 3600 * 24;
                var hours   = Math.floor(seconds / 3600);
                seconds  -= hours * 3600;
                var minutes = Math.floor(seconds / 60);
                seconds  -= minutes * 60;
                return  days + "D " + hours + "H "+ minutes + "M " + seconds +"S";
            }

            setInterval( function () {
                $("time_passed").each(function() {
                    var elapsed = parseInt($(this).attr('elapsed')) + 1;
                    $(this).attr('elapsed', elapsed);
                    $(this).text(calculate_time_passed(elapsed));
                    });
                }, 1000
            );

            $(document).ready(() => {
                const ws = new WebSocket('wss://' + window.location.host + '/api/graphql', 'graphql-ws');
                ws.addEventListener('open', (event) => {
                    fetch("/jwt/auth", {
                        method: "GET",
                        credentials: 'include',
                    })
                    .then(response => response.json())
                    .then(data => ws.send(JSON.stringify({
                        type:"connection_init",
                        payload:{
                            headers:{
                                "Content-Type":"application/json",
                                "Authorization":"Bearer " + data['access_token']
                            }
                        }
                    })))
                    .catch(error => console.error(error));
                });
                ws.addEventListener('message', function conn_ack(event) {
                    data = JSON.parse(event.data);
                    if(data.type === 'connection_ack') {
                        ws.removeEventListener('message', conn_ack);
                        render_table(ws);
                        fetchDbStatsLive(ws);
                        fetchProcStatesLive(ws, render_modules_state);
                        $('#hijacks_table').on( 'draw.dt', function () {
                            asn_map_to_name();
                        });
                        displayHelpTextTable();
                    }
                });

                $("#last_login").html("(" + transform_unix_timestamp_to_client_local_time($("#last_login").text()) + ")")
                $('#timezone').html(display_timezone());
                $("#{{request.endpoint}}").addClass("active");
            });
        </script>
        <script nonce="{{ csp_nonce() }}" src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
        <script nonce="{{ csp_nonce() }}" src="https://cdnjs.cloudflare.com/ajax/libs/clipboard-polyfill/2.8.6/clipboard-polyfill.js"></script>

        <script nonce="{{ csp_nonce() }}" src="{{ url_for('static', filename='js/custom/graphql.js') }}{{ js_version }}"></script>
        <script nonce="{{ csp_nonce() }}" src="{{ url_for('static', filename='js/custom/utils.js') }}{{ js_version }}"></script>
        <script nonce="{{ csp_nonce() }}" src="{{ url_for('static', filename='datatable/jquery.dataTables.min.js') }}{{ js_version }}"></script>
        <script nonce="{{ csp_nonce() }}" src="{{ url_for('static', filename='js/moment-with-locales.min.js') }}{{ js_version }}"></script>
        <script nonce="{{ csp_nonce() }}" src="{{ url_for('static', filename='datatable/datetime-moment.js') }}{{ js_version }}"></script>
        <script nonce="{{ csp_nonce() }}" src="{{ url_for('static', filename='datatable/dataTables.bootstrap4.min.js') }}{{ js_version }}"></script>
        <script nonce="{{ csp_nonce() }}" src="https://cdn.datatables.net/rowreorder/1.2.5/js/dataTables.rowReorder.min.js"></script>
        <script nonce="{{ csp_nonce() }}" src="https://cdn.datatables.net/responsive/2.2.3/js/dataTables.responsive.min.js"></script>
        <script nonce="{{ csp_nonce() }}" src="{{ url_for('static', filename='js/custom/display_info.js') }}{{ js_version }}"></script>
        <script nonce="{{ csp_nonce() }}" src="{{ url_for('static', filename='js/custom/ripestat.js') }}{{ js_version }}"></script>
    {% endblock %}
{% endblock %}
