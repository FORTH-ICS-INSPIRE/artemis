{% extends "layout.htm" %}

{% block title %}
    {{super()}} - BGP Updates
{% endblock %}

{% block head %}
    {{super()}}
    <link rel="stylesheet" href="{{ url_for('static', filename='css/index.css') }}">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.19/css/dataTables.bootstrap4.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/daterangepicker.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/switches.css') }}">
    <link rel="stylesheet" href="https://cdn.datatables.net/rowreorder/1.2.5/css/rowReorder.dataTables.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.2.3/css/responsive.dataTables.min.css">
{% endblock %}

{% block page_content %}
    {{super()}}
        <div class="row">
            <div class="col-lg-12 page-header">
                <div class="row">
                    <div class="col-lg-6">
                        <h1>BGP Updates</h1>
                    </div>
                    <div class="col-lg-2 offset-lg-3">
                        <h2>Live Update:</h2>
                    </div>
                    <div class="col-lg-1">
                        <label class="switch">
                            <input data-toggle="toggle" id="live_update_button" name="live_update_switch" type="checkbox" checked>
                            <span class="slider round"></span>
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="row">
                    <div class="col-lg-1">
                        <p id="display_entries_time"> <b helpText="field_time_window_custom"> Timewindow: </b></p>
                    </div>
                    <div class="col-lg-3">
                        <div id="timewindow_buttons">
                            <button type="button" id="select_timewindow_all" class="btn btn-outline-primary btn-sm">All</button>
                            <button type="button" id="select_timewindow_1h" class="btn btn-outline-secondary btn-sm">1h</button>
                            <button type="button" id="select_timewindow_24h" class="btn btn-outline-secondary btn-sm">24h</button>
                            <button type="button" id="select_timewindow_48h" class="btn btn-outline-secondary btn-sm">48h</button>
                            <button type="button" id="select_timewindow_other" class="btn btn-outline-secondary btn-sm">Custom</button>
                        </div>
                        <div id="custom_time" style="display: none;">
                            <div class="row">
                                <div class="col-lg-10">
                                    <div class="panel panel-default">
                                        <div class="panel-body">
                                            <input class="form-control" type="text" name="datetimes"/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                
                <table class="table table-striped table-bordered" style="width:100%" id="bgp_updates">
                    <thead>
                        <th helpText="field_bgp_timestamp">Timestamp</th>
                        <th helpText="field_prefix">Prefix</th>
                        <th helpText="field_origin_as">Origin AS</th>
                        <th helpText="field_as_path">AS Path</th>
                        <th helpText="field_peer_as">Peer AS</th>
                        <th helpText="field_service">Service</th>
                        <th helpText="field_bgp_update_type">Type</th>
                        <th helpText="field_view_hijack">Hijack</th>
                        <th helpText="field_bgp_handle">Status</th>
                        <th helpText="field_bgp_update_more">More</th>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>Timestamp</th>
                            <th>Prefix</th>
                            <th>Origin AS</th>
                            <th>AS Path</th>
                            <th>Peer AS</th>
                            <th>Service</th>
                            <th>Type</th>
                            <th>Hijack</th>
                            <th>Status</th>
                            <th>More</th>
                        </tr>
                    </tfoot>
                </table>
                

            </div>
        </div>
        <div class="row mt-3">
            <div class="col-lg-6 offset-lg-6">
                </hr>
                <p class="float-right"><i>Times are shown in your local time zone <b id="timezone"></b>.</i></p>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <i class="fa fa-bell fa-fw"></i> Additional actions
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-lg-6">
                                <div class="panel-body">
                                    <div class="form-group">
                                        <div class="row">
                                            <div class="col-lg-3">
                                                View distinct values
                                            </div>
                                            <div class="col-lg-4">
                                                <select class="form-control" id="distinct_values_selection">
                                                    <option value="select">Select</option>
                                                    <option value="prefix">Prefix</option>
                                                    <option value="origin_as">Origin AS</option>
                                                    <option value="peer_asn">Peer AS</option>
                                                    <option value="service">Service</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-1">
                            <div class="col-lg-10 offset-lg-1">
                                <div class="card card-body card-body-hide" id="distinct_values_text"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


    
{% endblock %}

{% block body %}
    {{super()}}
    {% block scripts %}
        {{super()}}
        <script>
            var table;
            var query = "";
            var ws = null;
            var refresh_state_live = true;
            var count_open_details = 0;
            var static_urls = {
                "handled.png": "{{ url_for('static', filename='images/handled.png') }}",
                "unhadled.png": "{{ url_for('static', filename='images/unhadled.png') }}",
                "rrcs_location": "{{ url_for('static', filename='rrcs_info/collectors_info.json') }}"
            };
            var hijack_redirect = "{{ url_for('main.display_hijack') }}";
            var datatable_parameters = {
                    'order': [
                        {
                            'column': 0,
                            'dir': "desc"
                        }
                    ],
                    'offset': 0,
                    'limit': 0
                };
            var downloadTable_parameters = null;
            var fields_to_display = [
                ['prefix', 'Prefix', 'field_prefix'],
                ['origin_as', 'Origin AS', 'field_origin_as'],
                ['as_path', 'AS Path', 'field_as_path'],
                ['orig_path', 'Original Path', 'field_original_path'],
                ['peer_asn', 'Peer AS', 'field_peer_as'],
                ['service', 'Service', 'field_service'],
                ['type', 'Type', 'field_bgp_update_type'],
                ['communities', 'Communities', 'field_bgp_communities'],
                ['timestamp', 'Timestamp', 'field_bgp_timestamp'],
                ['hijack_key', 'Hijack_key', 'field_hijack_key'],
                ['matched_prefix', 'Matched Prefix', 'field_matched_prefix_hijack'],
                ['hijack_link', 'View Hijack', 'field_view_hijack'],
                ['handled', 'Handled', 'field_bgp_handle']
            ];

            // Columns that can be sorted
            var columns = [
                { data: 'timestamp' },
                { data: 'prefix' },
                { data: 'origin_as' },
                { data: 'as_path' },
                { data: 'peer_asn' },
                { data: 'service' },
                { data: 'type' }
            ];

            var filter_parameters = {
                'prefixes_selection': null,
                'time': null,
                'prefix': null,
                'origin_as': null,
                'peer_asn': null,
                'service': null,
                'type': null
            };

            var exlude_columns_from_search = ['Timestamp', 'AS Path', 'Hijack', 'Status', 'More'];
            var custom_message_for_search = {
                "Type": "A|W"
            };

            var search_table_map = {
                1: "prefix",
                2: "origin_as",
                3: "as_path",
                4: "peer_asn",
                5: "service",
                6: "type"
            };

            var custom_time = [
                {
                    "id": "#select_timewindow_all",
                },
                {
                    "id": "#select_timewindow_1h",
                },
                {
                    "id": "#select_timewindow_24h",
                },
                {
                    "id": "#select_timewindow_48h",
                },
                {
                    "id": "#select_timewindow_other",
                },
            ];

            function display_time_selection(custom_time_data){
                for(item in custom_time_data){
                    $(custom_time_data[item]["id"]).on('click', function(event) {
                        $('#timewindow_buttons').children().each(function () { $(this).attr('class', 'btn btn-outline-secondary btn-sm'); });
                        $(this).attr('class', 'btn btn-outline-primary btn-sm');
                        if(event.target.id == 'select_timewindow_all'){
                            filter_parameters['time'] = null;
                        }else if(event.target.id == 'select_timewindow_other'){
                            if($('#custom_time').is(":visible")){
                                $('#custom_time').hide();
                            }else{
                                $('#custom_time').show();
                            }
                        }else{
                            var hours_back = 0;
                            if(event.target.id == 'select_timewindow_1h'){
                                hours_back = 1;
                            }else if(event.target.id == 'select_timewindow_24h'){
                                hours_back = 24;
                            }else if(event.target.id == 'select_timewindow_48h'){
                                hours_back = 48;
                            }
                            var start_date = new Date();
                            start_date.setHours(start_date.getHours() - hours_back);
                            var end_date = new Date();
                            filter_parameters['time'] = {
                                'start_time': start_date.toISOString(),
                                'end_time': end_date.toISOString()
                            };
                        }
                        construct_filter_bgp_update_query();
                        table.draw();
                    });
                }
            }

            $('#bgp_updates tfoot th').each(function() {
                var title = $(this).text();
                if(!(exlude_columns_from_search.includes(title))){
                    if(title in custom_message_for_search){
                        var html_ = '<input class="form-control" id="input_' + title + '" type="text" placeholder="' + custom_message_for_search[title] + '" />';
                        html_ += '<div class="invalid-feedback"></div>';
                        $(this).html(html_);
                    }else{
                        var html_ = '<input class="form-control" id="input_' + title + '"s type="text" placeholder="' + title + '" />';
                        html_ += '<div class="invalid-feedback"></div>';
                        $(this).html(html_);
                    }
                }else{
                    $(this).html('');
                }
            });

            function inspect_input_of_search_boxes(){
                $("#bgp_updates tfoot tr th").each(function (index, item) {
                    if(index in search_table_map){
                        var value = $(this).children("input").val();
                        if(value == null || value == ''){
                            filter_parameters[search_table_map[index]] = null;
                            if($(this).children("input").hasClass("is-invalid")){
                                $(this).children("input").removeClass("is-invalid");
                                $(this).children("div").hide();
                            }
                        }else{
                            if(search_table_map[index] == 'prefix'){
                                var match_value = null;
                                var regex_match = /((^\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))(\/([0-9]|[1-2][0-9]|3[0-2]))?\s*$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?(\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?\s*$))/;
                                if(regex_match.exec(value)){
                                    match_value = value.replace(/^\s+|\s+$/g, '');
                                    filter_parameters[search_table_map[index]] = match_value;
                                    if($(this).children("input").hasClass("is-invalid")){
                                        $(this).children("input").removeClass("is-invalid");
                                        $(this).children("div").hide();
                                    }
                                    filter_parameters[search_table_map[index]] = value;
                                    if($(this).children("input").hasClass("is-invalid")){
                                        $(this).children("input").removeClass("is-invalid");
                                        $(this).children("div").hide();
                                    }
                                }else{
                                    $(this).children("input").addClass("is-invalid");
                                    $(this).children("div").text('Not a valid v4/v6 prefix');
                                    $(this).children("div").show();
                                }
                            }else if(search_table_map[index] == 'origin_as' || search_table_map[index] == 'peer_asn'){
                                var number_reg = /^\s*(\d+)\s*$/;
                                var match = number_reg.exec(value);
                                var origin_as = null;
                                if(match != null){
                                    origin_as = parseInt(match[1]);
                                }else{
                                    origin_as = -1;
                                }
                                if(0 < origin_as && origin_as < 4199999999){
                                    filter_parameters[search_table_map[index]] = origin_as;
                                    if($(this).children("input").hasClass("is-invalid")){
                                        $(this).children("input").removeClass("is-invalid");
                                        $(this).children("div").hide();
                                    }
                                }else{
                                    $(this).children("input").addClass("is-invalid");
                                    $(this).children("div").text('Not an ASN');
                                    $(this).children("div").show();
                                }
                            }else if(search_table_map[index] == 'type'){
                                var type_regex = /^\s*(A|W|a|w)\s*/;
                                var match = type_regex.exec(value);
                                var type = null;

                                if(match != null){
                                    type = match[1].toUpperCase();
                                    filter_parameters[search_table_map[index]] = type;
                                    if($(this).children("input").hasClass("is-invalid")){
                                        $(this).children("input").removeClass("is-invalid");
                                        $(this).children("div").hide();
                                    }
                                }else{
                                    $(this).children("input").addClass("is-invalid");
                                    $(this).children("div").text('Not A|W');
                                    $(this).children("div").show();
                                }
                            }else if(search_table_map[index] == 'service'){
                                var service_regex = /^\s*(\S.*\S)\s*/;
                                var match = service_regex.exec(value);
                                if(match != null){
                                    filter_parameters[search_table_map[index]] = match[1];
                                }
                            }else{
                                filter_parameters[search_table_map[index]] = value;
                            }
                        }
                    }
                });
            }

            function construct_filter_bgp_update_query(){
                var filters = [];
                var download_filters = [];
                inspect_input_of_search_boxes();

                if(filter_parameters['time'] != null){
                    filters.push('{ timestamp: {_gte: "' + filter_parameters['time']['start_time'] + '"} }');
                    filters.push('{ timestamp: {_lte: "' + filter_parameters['time']['end_time'] + '"} }');
                    download_filters.push('timestamp.gte.' + filter_parameters['time']['start_time'] + ',timestamp.lte.' + filter_parameters['time']['end_time']);
                }

                if(filter_parameters['prefixes_selection'] != null){
                    filters.push('{ matched_prefix: {_eq: "' + filter_parameters['prefixes_selection'] + '"} }');
                    download_filters.push('matched_prefix.eq.' + filter_parameters['prefixes_selection']);
                }

                if(filter_parameters['prefix'] != null){
                    filters.push('{ prefix: {_eq: "' + filter_parameters['prefix'] + '"} }');
                    download_filters.push('prefix.eq.' + filter_parameters['prefix']);
                }

                if(filter_parameters['origin_as'] != null){
                    filters.push('{ origin_as: {_eq: "' + filter_parameters['origin_as'] + '"} }');
                    download_filters.push('origin_as.eq.' + filter_parameters['origin_as']);
                }

                if(filter_parameters['as_path'] != null){
                    filters.push('{ as_path: {_in: [' + filter_parameters['as_path'] + ']} }');
                    download_filters.push('as_path.cs.{' + filter_parameters['as_path'] + "}");
                }

                if(filter_parameters['peer_asn'] != null){
                    filters.push('{ peer_asn: {_eq: "' + filter_parameters['peer_asn'] + '"} }');
                    download_filters.push('peer_asn.eq.' + filter_parameters['peer_asn']);
                }

                if(filter_parameters['service'] != null){
                    var _service = filter_parameters['service'].replace(/ -> |-> | -> |->/gi, '|');
                    filters.push('{ service: {_like: "%' + _service + '%"} }');
                    download_filters.push('service.like.*' + _service + '*');
                }

                if(filter_parameters['type'] != null){
                    filters.push('{ type: {_eq: "' + filter_parameters['type'] + '"} }');
                    download_filters.push('type.eq.' + filter_parameters['type']);
                }

                if(filters.length > 0){
                    $("#distinct_values_selection").val('select');
                    $('#distinct_values_text').val("");
                    $('#distinct_values_text').hide();
                    datatable_parameters['and'] = 'where: { _and: [' + filters.join() + '] }';
                    downloadTable_parameters = '(' + download_filters.join() + ')';
                }else{
                    datatable_parameters['and'] = null;
                    downloadTable_parameters = null;
                }
                downloadTable_update_link();
            }

            function render_table(ws){
                construct_filter_bgp_update_query();

                table = $('#bgp_updates').DataTable( {
                    "processing": false,
                    "serverSide": true,
                    "searching": false,
                    "pagingType": "numbers",
                    "ajax": (data, callback, settings) => {
                        var sort;
                        if(data.order[0].dir == 'desc'){
                            sort = 'desc_nulls_first';
                        }else{
                            sort = 'asc';
                        }
                        datatable_parameters['offset'] = data.start;
                        datatable_parameters['limit'] = data.length;
                        query = "{ datatable: view_bgpupdates_aggregate"
                        if(datatable_parameters['and'] != null){
                            query += "(" + datatable_parameters['and'] + ") { aggregate { totalCount: count } }";
                        }else{
                            query += " { aggregate { totalCount: count } }";
                        }
                        query += " view_data: view_bgpupdates(limit: " + datatable_parameters['limit'] + ", offset: " + datatable_parameters['offset']
                        query += ", order_by: {" + columns[data.order[0].column].data + ": " + sort + " } "
                        if(datatable_parameters['and'] != null){
                            query += datatable_parameters['and'] +  ")";
                        }else{
                            query += ")";
                        }
                        query += " { prefix origin_as peer_asn as_path service type communities timestamp hijack_key handled matched_prefix orig_path } }"
                        count_open_details = 0;
                        if(refresh_state_live){
                            fetchDatatableLive(ws, callback, query);
                        }else{
                            fetchDatatable(callback, query);
                        }
                    },
                    initComplete: function() {
                        var api = this.api();
                        api.columns().every(function() {
                            var that = this;
                            var column_index = that[0][0]
                            $('input', this.footer()).on('keydown', function(ev) {
                                if (ev.keyCode == 13) { //only on enter keypress (code 13)
                                    construct_filter_bgp_update_query();
                                    that.draw()
                                }
                            });
                        });
                        var tool_elems = $("#bgp_updates_wrapper").children('div').eq(0).children('div');
                        var prefixes_select = "  |  <label>Select prefix</label>  ";
                        prefixes_select += '<select class="custom-select custom-select-sm form-control form-control-sm" id="prefixes_selection">';
                        prefixes_select += '<option>All</option>';
                        {% for prefix in prefixes %}
                            prefixes_select += '<option>{{ prefix }}</option>';
                        {% endfor %}
                        prefixes_select += '</select>';

                        $(tool_elems).eq(0).children('div').append(prefixes_select);

                        $("#prefixes_selection").change(function () {
                            var option = this.value;
                            if(option == "All"){
                                filter_parameters['prefixes_selection'] = null;
                            }else{
                                filter_parameters['prefixes_selection'] = option;
                            }
                            construct_filter_bgp_update_query();
                            table.draw();
                        });

                        $(tool_elems).eq(1).html('<a id="download_table_button" href="#" target="_blank" class="btn btn-primary btn-sm float-right" role="button">Download Table</a>');
                        downloadTable_update_link();
                    },
                    "order": [[ 0, "desc" ]],
                    "columns": [
                        { data: 'timestamp', "width": "150px"},
                        { data: 'prefix' },
                        { data: 'origin_as', "width": "96px" },
                        { data: 'as_path' },
                        { data: 'peer_asn', "width": "96px" },
                        { data: 'service' },
                        { data: 'type', "width": "56px" },
                        { data: 'hijack_link', "width": "14px" },
                        { data: 'handled', "width": "14px" },
                        {
                            "className":      'details-control',
                            "orderable":      false,
                            "data":           null,
                            "defaultContent": '',
                            "width": "14px"
                        }
                    ],
                    "columnDefs": [
                        {
                            "targets": [1,2,3,4,5,6,7,8,9],
                            "orderable": false,
                        },
                        {
                            "targets": [6,7,8,9],
                            "className": "text-center",
                        }
                    ],
                    "rowReorder": {
                        "selector": 'td:nth-child(2)'
                    },
                    "language": {
                        "emptyTable": "<h3>No BGP Updates to display</h3>"
                    },
                    "responsive": true
                });
            }

            $(document).ready(function(){
                ws = new WebSocket('wss://' + window.location.hostname + '/api/graphql', 'graphql-ws');
                ws.addEventListener('open', (event) => {
                    fetch("/jwt/auth", {
                        method: "GET",
                        credentials: 'include'
                    })
                    .then(response => response.json())
                    .then(data => ws.send(JSON.stringify({
                        type:"connection_init",
                        payload:{
                            headers:{
                                "Content-Type":"application/json",
                                "Authorization":"Bearer " + data['access_token']
                            }
                        }
                    })))
                    .catch(error => console.error(error));
                });
                ws.addEventListener('message', function conn_ack(event) {
                    data = JSON.parse(event.data);
                    if(data.type === 'connection_ack') {
                        ws.removeEventListener('message', conn_ack);
                        render_table(ws);

                        $('#bgp_updates tbody').on('click', 'td.details-control', function () {
                            var tr = $(this).closest('tr');
                            var row = table.row(tr);
                            if (row.child.isShown()) { // Close More
                                count_open_details -= 1;
                                row.child.hide();
                                if(count_open_details == 0 && refresh_state_live == true){
                                    startDatatableLive(ws, query);
                                }
                                tr.removeClass('shown');
                            }else { // Enable More
                                if(count_open_details == 0 && refresh_state_live == true){
                                    stopDatatableLive(ws);
                                }
                                count_open_details += 1;
                                row.child( format(row.data())).show();
                                tr.addClass('shown');
                                displayHelpMoreBGPupdate();
                                asn_map_to_name();
                                service_to_name();
                            }
                        });
                        $('#bgp_updates').on( 'draw.dt', function () {
                            asn_map_to_name();
                            service_to_name();
                        });
                        displayHelpTextTable();
                    }
                });

                display_time_selection(custom_time);
                $('input[name="datetimes"]').daterangepicker({
                    timePicker: true,
                    startDate: moment().startOf('hour'),
                    endDate: moment().startOf('hour').add(32, 'hour'),
                    locale: {
                        format: 'M/DD hh:mm A'
                    }
                },  function(start, end, label) {
                    filter_parameters['time'] = { 'start_time': start.toISOString(), 'end_time': end.toISOString()};
                    construct_filter_bgp_update_query();
                    table.draw();
                    }
                );

                $('#timezone').html(display_timezone());
                displayHelpTextB();
            });

            function format ( d ) {
                var html_ = '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;">';
                for(item in fields_to_display){
                    html_ += '<tr><td helpText="' + fields_to_display[item][2] +'"><b>' + fields_to_display[item][1] + ':</b></td>';
                    html_ += '<td>' + d[fields_to_display[item][0]] + '</td></tr>';
                }
                html_ += '</table>';
                return html_;
            }

            $("#live_update_button").on('change', function() {
                if ($(this).is(':checked')) {
                    refresh_state_live = true;
                    startDatatableLive(ws, query);
                }else {
                    stopDatatableLive(ws);
                    refresh_state_live = false;
                }
            });

            $("#distinct_values_selection").on('change', function() {
                var distinct_on = $(this).val();

                if(distinct_on == "select"){
                    $('#distinct_values_text').hide();
                    return;
                }

                var query = "{ view_data: view_bgpupdates(distinct_on: [" + distinct_on + "] ";
                if(datatable_parameters['and'] != null){
                    query += datatable_parameters['and'] +  ")";
                }else{
                    query += ")";
                }
                query += " { " + distinct_on + " } }";
                fetchDistinctValues(distinct_on, query);
            });

            function downloadTable_update_link(){
                var url = "{{ url_for('proxy_api') }}" + "?download_table=true&action=view_bgpupdates";
                if(downloadTable_parameters != null){
                    url += "&parameters=" + downloadTable_parameters;
                }
                $("#download_table_button").attr("href", url);
            }

        </script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
        <script src="{{ url_for('static', filename='js/custom/prod-graphql.js') }}{{ js_version }}"></script>
        <script src="{{ url_for('static', filename='datatable/jquery.dataTables.min.js') }}{{ js_version }}"></script>
        <script src="{{ url_for('static', filename='js/custom/prod-utils.js') }}{{ js_version }}"></script>
        <script src="{{ url_for('static', filename='js/moment-with-locales.min.js') }}{{ js_version }}"></script>
        <script src="{{ url_for('static', filename='datatable/datetime-moment.js') }}{{ js_version }}"></script>
        <script src="https://cdn.datatables.net/1.10.19/js/dataTables.bootstrap4.min.js"></script>
        <script src="https://cdn.datatables.net/rowreorder/1.2.5/js/dataTables.rowReorder.min.js"></script>
        <script src="https://cdn.datatables.net/responsive/2.2.3/js/dataTables.responsive.min.js"></script>
        <script src="{{ url_for('static', filename='js/daterangepicker.min.js') }}{{ js_version }}"></script>
        <script src="{{ url_for('static', filename='js/custom/prod-display_info.js') }}{{ js_version }}"></script>
        <script src="{{ url_for('static', filename='js/custom/prod-ripestat.js') }}{{ js_version }}"></script>
    {% endblock %}
{% endblock %}
