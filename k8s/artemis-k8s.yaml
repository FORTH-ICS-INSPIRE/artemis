apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f ../docker-compose.yaml --controller deployment
        --volumes hostPath -o artemis-k8s.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: graphql
    name: graphql
  spec:
    ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
    selector:
      io.kompose.service: graphql
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f ../docker-compose.yaml --controller deployment
        --volumes hostPath -o artemis-k8s.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: backend
    name: backend
  spec:
    ports:
    - name: "9001"
      port: 9001
      targetPort: 9001
    selector:
      io.kompose.service: backend
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f ../docker-compose.yaml --controller deployment
        --volumes hostPath -o artemis-k8s.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: frontend
    name: frontend
  spec:
    ports:
    - name: "8000"
      port: 8000
      targetPort: 8000
    selector:
      io.kompose.service: frontend
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f ../docker-compose.yaml --controller deployment
        --volumes hostPath -o artemis-k8s.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: rabbitmq
    name: rabbitmq
  spec:
    ports:
    - name: "5672"
      port: 5672
      targetPort: 5672
    selector:
      io.kompose.service: rabbitmq
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f ../docker-compose.yaml --controller deployment
        --volumes hostPath -o artemis-k8s.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: postgres
    name: postgres
  spec:
    ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
    selector:
      io.kompose.service: postgres
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f ../docker-compose.yaml --controller deployment
        --volumes hostPath -o artemis-k8s.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: postgrest
    name: postgrest
  spec:
    ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
    selector:
      io.kompose.service: postgrest
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -f ../docker-compose.yaml --controller deployment
        --volumes hostPath -o artemis-k8s.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: nginx
    name: nginx
  spec:
    ports:
    - name: "80"
      port: 80
      targetPort: 80
    - name: "443"
      port: 443
      targetPort: 443
    selector:
      io.kompose.service: nginx
  status:
    loadBalancer: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f ../docker-compose.yaml --controller deployment
        --volumes hostPath -o artemis-k8s.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: backend
    name: backend
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: backend
      spec:
        containers:
        - env:
          - name: DATABASE_HOST
            value: postgres
          - name: DATABASE_NAME
            value: artemis_db
          - name: DATABASE_PASSWORD
            value: Art3m1s
          - name: DATABASE_USER
            value: artemis_user
          - name: DATABASE_VERSION
            value: "11"
          - name: GUI_ENABLED
            value: "true"
          - name: HASURA_GRAPHQL_ACCESS_KEY
            value: '@rt3m1s.'
          - name: POSTGRES_HOST
            value: postgres
          - name: RABBITMQ_HOST
            value: rabbitmq
          - name: RABBITMQ_URI
            value: amqp://guest:guest@rabbitmq:5672//
          - name: SUPERVISOR_HOST
            value: backend
          - name: SUPERVISOR_PORT
            value: "9001"
          image: inspiregroup/artemis-backend:latest
          name: backend
          resources: {}
          volumeMounts:
          - mountPath: /etc/artemis
            name: backend-hostpath0
          - mountPath: /etc/supervisor/conf.d
            name: backend-hostpath1
        restartPolicy: Always
        volumes:
        - hostPath:
            path: /home/docker/artemis/backend/configs
            type: Directory
          name: backend-hostpath0
        - hostPath:
            path: /home/docker/artemis/backend/supervisor.d
            type: Directory
          name: backend-hostpath1
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f ../docker-compose.yaml --controller deployment
        --volumes hostPath -o artemis-k8s.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: frontend
    name: frontend
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: frontend
      spec:
        containers:
        - env:
          - name: FLASK_PORT
            value: "8000"
          - name: FLASK_SECRET_KEY
            value: 76f8bae45e807865955344c1a58882d38c8ceb4f855f58091642b7d48290af97
          - name: JS_VERSION
            value: 0.1.1
          - name: JWT_SECRET_KEY
            value: 44fe431cdc896ccab691ad0599f4e0a12690ce1ededebe57b825823bc6b4d24f
          - name: MACHINE_IP
            value: 0.0.0.0
          - name: POSTGREST_FLASK_HOST
            value: postgrest:3000
          - name: POSTGRES_HOST
            value: postgres
          - name: RABBITMQ_HOST
            value: rabbitmq
          - name: RABBITMQ_URI
            value: amqp://guest:guest@rabbitmq:5672//
          - name: SECURITY_PASSWORD_SALT
            value: 06a4b397fc7045eac527c2aec3ff46cee5ce30016c760f238c26e79902fe67b6
          - name: SUPERVISOR_HOST
            value: backend
          - name: SUPERVISOR_PORT
            value: "9001"
          - name: SYSTEM_VERSION
            value: latest
          - name: USER_ROOT_EMAIL
            value: admin@admin
          - name: USER_ROOT_PASSWORD
            value: admin123
          - name: USER_ROOT_USERNAME
            value: admin
          image: inspiregroup/artemis-frontend:latest
          name: frontend
          resources: {}
          volumeMounts:
          - mountPath: /etc/artemis/
            name: frontend-hostpath0
          - mountPath: /etc/webapp/db/
            name: frontend-hostpath1
        restartPolicy: Always
        volumes:
        - hostPath:
            path: /home/docker/artemis/frontend/webapp/configs
            type: Directory
          name: frontend-hostpath0
        - emptyDir: {}
          name: frontend-hostpath1
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f ../docker-compose.yaml --controller deployment
        --volumes hostPath -o artemis-k8s.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: graphql
    name: graphql
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: graphql
      spec:
        containers:
        - args:
          - graphql-engine
          - serve
          env:
          - name: HASURA_GRAPHQL_ACCESS_KEY
            value: '@rt3m1s.'
          - name: HASURA_GRAPHQL_DATABASE_URL
            value: postgres://artemis_user:Art3m1s@postgres:5432/artemis_db
          - name: HASURA_GRAPHQL_ENABLE_CONSOLE
            value: "false"
          - name: HASURA_GRAPHQL_JWT_SECRET
            value: '{"type":"HS256", "key":"44fe431cdc896ccab691ad0599f4e0a12690ce1ededebe57b825823bc6b4d24f"}'
          image: hasura/graphql-engine:v1.0.0-alpha31
          name: graphql
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f ../docker-compose.yaml --controller deployment
        --volumes hostPath -o artemis-k8s.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: nginx
    name: nginx
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: nginx
      spec:
        containers:
        - image: nginx:1.15-alpine
          name: nginx
          ports:
          - containerPort: 80
          - containerPort: 443
          resources: {}
          volumeMounts:
          - mountPath: /etc/nginx/nginx.conf
            name: nginx-hostpath0
          - mountPath: /etc/nginx/certs/
            name: nginx-hostpath1
        restartPolicy: Always
        volumes:
        - hostPath:
            path: /home/docker/artemis/frontend/webapp/configs/nginx.conf
            type: File
          name: nginx-hostpath0
        - hostPath:
            path: /home/docker/artemis/frontend/webapp/configs/certs
            type: Directory
          name: nginx-hostpath1
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f ../docker-compose.yaml --controller deployment
        --volumes hostPath -o artemis-k8s.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: pg-amqp-bridge
    name: pg-amqp-bridge
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: pg-amqp-bridge
      spec:
        containers:
        - args:
          - /root/wait-for
          - rabbitmq:5672
          - -t
          - "60"
          - --
          - pg-amqp-bridge
          env:
          - name: AMQP_URI
            value: amqp://guest:guest@rabbitmq:5672//
          - name: BRIDGE_CHANNELS
            value: events:amq.direct
          - name: POSTGRESQL_URI
            value: postgres://artemis_user:Art3m1s@postgres:5432/artemis_db
          image: subzerocloud/pg-amqp-bridge:0.0.6
          name: pg-amqp-bridge
          resources: {}
          volumeMounts:
          - mountPath: /root/wait-for
            name: pg-amqp-bridge-hostpath0
        restartPolicy: Always
        volumes:
        - hostPath:
            path: /home/docker/artemis/backend/wait-for
            type: File
          name: pg-amqp-bridge-hostpath0
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f ../docker-compose.yaml --controller deployment
        --volumes hostPath -o artemis-k8s.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: postgres
    name: postgres
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: postgres
      spec:
        containers:
        - command:
          - ./postgres-entrypoint.sh
          env:
          - name: DB_AUTOCLEAN
            value: "false"
          - name: DB_BACKUP
            value: "true"
          - name: DB_HIJACK_DORMANT
            value: "false"
          - name: POSTGRES_DB
            value: artemis_db
          - name: POSTGRES_PASSWORD
            value: Art3m1s
          - name: POSTGRES_USER
            value: artemis_user
          image: timescale/timescaledb:1.1.0-pg10
          name: postgres
          resources: {}
          volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: postgres-hostpath0
          - mountPath: /postgres-entrypoint.sh
            name: postgres-hostpath1
          - mountPath: /tmp/
            name: postgres-hostpath2
          - mountPath: /docker-entrypoint-initdb.d/zinit.sql
            name: postgres-hostpath3
          - mountPath: /docker-entrypoint-initdb.d/data/
            name: postgres-hostpath4
          - mountPath: /docker-entrypoint-initdb.d/libs/
            name: postgres-hostpath5
        restartPolicy: Always
        volumes:
        - emptyDir: {}
          name: postgres-hostpath0
        - hostPath:
            path: /home/docker/artemis/other/postgres-entrypoint.sh
            type: File
          name: postgres-hostpath1
        - emptyDir: {}
          name: postgres-hostpath2
        - hostPath:
            path: /home/docker/artemis/other/db/init.sql
            type: File
          name: postgres-hostpath3
        - hostPath:
            path: /home/docker/artemis/other/db/data
            type: Directory
          name: postgres-hostpath4
        - hostPath:
            path: /home/docker/artemis/other/db/libs
            type: Directory
          name: postgres-hostpath5
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f ../docker-compose.yaml --controller deployment
        --volumes hostPath -o artemis-k8s.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: postgrest
    name: postgrest
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: postgrest
      spec:
        containers:
        - env:
          - name: PGRST_DB_ANON_ROLE
            value: artemis_user
          - name: PGRST_DB_SCHEMA
            value: public
          - name: PGRST_DB_URI
            value: postgres://artemis_user:Art3m1s@postgres:5432/artemis_db
          image: postgrest/postgrest:v5.2.0
          name: postgrest
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -f ../docker-compose.yaml --controller deployment
        --volumes hostPath -o artemis-k8s.yaml
      kompose.version: 1.16.0 (0c01309)
    creationTimestamp: null
    labels:
      io.kompose.service: rabbitmq
    name: rabbitmq
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: rabbitmq
      spec:
        containers:
        - env:
          - name: RABBITMQ_DEFAULT_PASS
            value: guest
          - name: RABBITMQ_DEFAULT_USER
            value: guest
          image: rabbitmq:3.7.8-management-alpine
          name: rabbitmq
          resources: {}
          volumeMounts:
          - mountPath: /etc/rabbitmq/enabled_plugins
            name: rabbitmq-hostpath0
        restartPolicy: Always
        volumes:
        - hostPath:
            path: /home/docker/artemis/other/rabbitmq/enabled_plugins
            type: File
          name: rabbitmq-hostpath0
  status: {}
kind: List
metadata: {}

